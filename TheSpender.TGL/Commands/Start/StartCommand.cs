using Telegram.Bot;
using Telegram.Bot.Types;
using TheSpender.BLL.Services.Users;
using TheSpender.DAL;
using TheSpender.TGL.Extensions;

namespace TheSpender.TGL.Commands.Start;

/// <summary>
/// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è /start
/// </summary>
internal sealed class StartCommand(
    SpenderDbContext dbContext,
    IUserService userService,
    ITelegramBotClient botClient) : ICommand
{
    public string CommandName => CommandNames.Start;

    public async Task Execute(Update update, CancellationToken cancellationToken)
    {
        var chatId = update.GetChatId();

        await CreateUser(chatId, cancellationToken);
        await dbContext.SaveChangesAsync(cancellationToken);

        await botClient.SendMessage(
            chatId,
            HelloMessageText,
            cancellationToken: cancellationToken, replyMarkup: Keyboards.MainMenu);
    }

    private async Task CreateUser(string chatId, CancellationToken cancellationToken)
    {
        var user = await userService.GetUserByClientId(chatId, cancellationToken);

        if (user == null)
        {
            user = userService.CreateUser(chatId, cancellationToken);
            dbContext.Users.Add(user);
        }
    }

    internal const string HelloMessageText = @"
–ü—Ä–∏–≤–µ—Ç! üëã
–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.
–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –≤–µ—Å—Ç–∏ —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤

üí° –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏. 
–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –ª—é–±—É—é –º–µ–ª–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `300 –∫–æ—Ñ–µ`).
–≠—Ç–æ –ª–µ–≥–∫–æ, –±—ã—Å—Ç—Ä–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞!";

}
